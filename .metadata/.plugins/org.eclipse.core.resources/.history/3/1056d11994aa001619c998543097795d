package lineAnimate
import processing.core._

class IR extends PApplet {
  var currX, currY: Float = 0
  
  def Draw (rules: List[IR]) {    
    var x, y: Float = 50
    
    point(x, y)

  }
}

case class Start (startX: Int, startY: Int) extends IR {
  currX = startX
  currY = startY
}

case class Right (moveRight: Float, rule: Int = 0, startRule: Boolean = false) extends IR {
  if(rule < moveRight && startRule) {
    x+=1;
    rule+=1;
  }
  if(rule1 == 100) 
    start2 = true 
}

case class Left (moveLeft: Float) extends IR {
  val bound = currX - moveLeft
  if (currX > bound && currY == currY) { currX-=1 }
}

case class Up (moveUp: Float) extends IR {
  val bound = currY - moveUp
  if (currY > bound && currX == currX) { currY-=1 }
}
  
case class Down (moveDown: Float) extends IR {
  val bound = currY + moveDown
  if (currY < bound && currX == currX) { currY+=1 }
}
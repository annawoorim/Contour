package lineAnimate
import processing.core._

object AnimationTest extends RulesIR { 
  def main(args: Array[String]) {
    PApplet.main(Array[String]("lineAnimate.AnimationTest"))
  }  
}

class AnimationTest extends PApplet {
  var pos: Position = Position(200,200)
  val rules: List[RulesIR] = List(
        Right(100),
        Down(100),
        Left(100),
        Up(80),
        Right(80),
        Down(60),
        Left(60),
        Up(40),
        Right(40),
        Down(20),
        Left(20)
  )
  
  AnimationTest.posRules(rules)
  AnimationTest.startRules(rules)
  /*
  var posMoved = new Array[Moved](rules.size)
  var startRule = new Array[Start](rules.size)  
  var i = 0
  for (i <- 0 to (rules.size - 1)) {
    posMoved.update(i, Moved())
    startRule.update(i, Start())
  }    
  startRule(0).setTrue
  */
  
  
  override def settings () {
    size(500, 500)
  }

  override def setup() {
    stroke(255)
    background(0)
    frameRate(300)
  }
    
  override def draw { 
    point(pos.currX, pos.currY)
    AnimationTest.runAnimation(rules, posMoved, startRule, pos)
    
    /*
    var i = 0
    for (i <- 0 to (rules.size - 2)) {
      AnimationTest.createRule(rules(i), posMoved(i), startRule(i), startRule(i+1), pos)
    }
    
    if(posMoved(rules.size - 1).num < rules(rules.size - 1).positionToMove && startRule(rules.size - 1).rule) {
      rules(rules.size - 1).modifyPosition(pos)
      posMoved(rules.size - 1).inc
    }
      
    point(pos.currX, pos.currY) 
    *   
    */
  }
}